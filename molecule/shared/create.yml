---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: false
  collections:
    - community.aws
    - community.crypto
  vars:
    # Run config handling
    default_run_id: "{{ lookup('password', '/dev/null chars=ascii_lowercase length=5') }}"
    default_run_config:
      run_id: '{{ default_run_id }}'

    run_config_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/run-config.yml"
    run_config_from_file: "{{ (lookup('file', run_config_path, errors='ignore') or '{}') | from_yaml }}"
    run_config: '{{ default_run_config | combine(run_config_from_file) }}'

    # Platform settings handling
    default_assign_public_ip: true
    default_aws_profile: "{{ lookup('env', 'AWS_PROFILE') }}"
    default_aws_region: "{{ molecule_yml.driver.region | d('us-east-2') }}"
    default_boot_wait_seconds: 120
    default_instance_type: t3a.medium
    default_key_inject_method: cloud-init # valid values: [cloud-init, ec2]
    default_key_name: 'molecule-{{ run_config.run_id }}'
    default_keypair_name: "molecule_key_{{ 20|random(seed=(lookup('env', 'CI_JOB_ID') ~ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY'))) }}"
    default_keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
    default_private_key_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/id_rsa"
    default_public_key_path: '{{ default_private_key_path }}.pub'
    default_ssh_user: ubuntu
    default_ssh_port: 22
    default_user_data: ''

    default_security_group_name: 'molecule-{{ run_config.run_id }}'
    default_security_group_description: Ephemeral security group for Molecule instances
    default_security_group_rules:
      - proto: tcp
        from_port: '{{ default_ssh_port }}'
        to_port: '{{ default_ssh_port }}'
        cidr_ip: '0.0.0.0/0'
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: '0.0.0.0/0'
    default_security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: '0.0.0.0/0'

    platform_defaults:
      assign_public_ip: '{{ default_assign_public_ip }}'
      aws_profile: '{{ default_aws_profile }}'
      boot_wait_seconds: '{{ default_boot_wait_seconds }}'
      instance_type: '{{ default_instance_type }}'
      key_inject_method: '{{ default_key_inject_method }}'
      key_name: '{{ default_key_name }}'
      private_key_path: '{{ default_private_key_path }}'
      public_key_path: '{{ default_public_key_path }}'
      security_group_name: '{{ default_security_group_name }}'
      security_group_description: '{{ default_security_group_description }}'
      security_group_rules: '{{ default_security_group_rules }}'
      security_group_rules_egress: '{{ default_security_group_rules_egress }}'
      ssh_user: '{{ default_ssh_user }}'
      ssh_port: '{{ default_ssh_port }}'
      cloud_config: {}
      image: ''
      image_name: ''
      image_owner: [self]
      name: ''
      region: '{{ default_aws_region }}'
      security_groups: []
      tags: {}
      volumes: []
      vpc_id: ''
      vpc_subnet_id: ''

    # Merging defaults into a list of dicts is, it turns out, not straightforward
    platforms: >-
      {{ [platform_defaults | dict2items]
           | product(molecule_yml.platforms | map('dict2items') | list)
           | map('flatten', levels=1)
           | list
           | map('items2dict')
           | list }}
  tasks:
    - name: Write run config to file
      copy:
        dest: '{{ run_config_path }}'
        content: '{{ run_config | to_yaml }}'

    - name: Generate local key pairs
      openssh_keypair:
        path: '{{ item.private_key_path }}'
        type: rsa
        size: 2048
        regenerate: never
      loop: '{{ platforms }}'
      loop_control:
        label: '{{ item.name }}'
      register: local_keypairs

    - name: Look up EC2 AMI(s) by owner and name (if image not set)
      ec2_ami_info:
        owners: '{{ item.image_owner }}'
        filters:
          name: '{{ item.image_name }}'
          architecture: '{{ item.image_architecture }}'
      loop: '{{ platforms }}'
      loop_control:
        label: '{{ item.name }}'
      when: not item.image
      register: ami_info

    - name: Get the default subnet IDs
      ec2_vpc_subnet_info:
        region: '{{ default_aws_region }}'
        filters:
          default-for-az: 'true'
      register: subnet_facts

    - name: Choose a default subnet ID
      set_fact:
        default_subnet_id: >-
          {{(
            subnet_facts.subnets |
            map(attribute='subnet_id') |
            list |
            random(seed=inventory_hostname)
          )}}

    - name: Create ephemeral EC2 keys (if needed)
      ec2_key:
        profile: '{{ item.aws_profile | default(omit) }}'
        region: '{{ item.region | default(omit) }}'
        name: '{{ item.key_name }}'
        key_material: '{{ local_keypair.public_key }}'
      vars:
        local_keypair: '{{ local_keypairs.results[index] }}'
      loop: '{{ platforms }}'
      loop_control:
        index_var: index
        label: '{{ item.name }}'
      when: item.key_inject_method == "ec2"
      register: ec2_keys

    - name: Create ephemeral security groups (if needed)
      ec2_group:
        profile: '{{ item.aws_profile | default(omit) }}'
        region: '{{ item.region | default(omit) }}'
        name: '{{ item.security_group_name }}'
        description: '{{ item.security_group_description }}'
        rules: '{{ item.security_group_rules }}'
        rules_egress: '{{ item.security_group_rules_egress }}'
      loop: '{{ platforms }}'
      loop_control:
        index_var: index
        label: '{{ item.name }}'
      when: item.security_groups | length == 0

    - name: Create ephemeral EC2 instance(s)
      ec2_instance:
        region: '{{ item.region | default(omit) }}'
        filters: '{{ platform_filters }}'
        instance_type: '{{ item.instance_type }}'
        image_id: '{{ platform_image_id }}'
        vpc_subnet_id: '{{ default_subnet_id }}'
        security_groups: '{{ platform_security_groups }}'
        network:
          assign_public_ip: '{{ item.assign_public_ip }}'
        volumes: '{{ item.volumes }}'
        key_name: "{{ (item.key_inject_method == 'ec2') | ternary(item.key_name, omit) }}"
        tags: '{{ platform_tags }}'
        user_data: '{{ platform_user_data }}'
        state: running
        wait: true
      vars:
        platform_security_groups: '{{ item.security_groups or [item.security_group_name] }}'
        platform_generated_image_id: "{{ (ami_info.results[index].images | sort(attribute='creation_date', reverse=True))[0].image_id }}"
        platform_image_id: '{{ item.image or platform_generated_image_id }}'

        platform_generated_cloud_config:
          users:
            - name: '{{ item.ssh_user }}'
              ssh_authorized_keys:
                - '{{ local_keypairs.results[index].public_key }}'
              sudo: 'ALL=(ALL) NOPASSWD:ALL'
        platform_cloud_config: >-
          {{ (item.key_inject_method == 'cloud-init')
               | ternary((item.cloud_config | combine(platform_generated_cloud_config)), item.cloud_config) }}
        platform_user_data: |-
          #cloud-config
          {{ platform_cloud_config | to_yaml }}

        platform_generated_tags:
          instance: '{{ item.name }}'
          'molecule-run-id': '{{ run_config.run_id }}'
        platform_tags: '{{ (item.tags or {}) | combine(platform_generated_tags) }}'
        platform_filter_keys: "{{ platform_generated_tags.keys() | map('regex_replace', '^(.+)$', 'tag:\\1') }}"
        platform_filters: '{{ dict(platform_filter_keys | zip(platform_generated_tags.values())) }}'
      loop: '{{ platforms }}'
      loop_control:
        index_var: index
        label: '{{ item.name }}'
      register: ec2_instances_async
      async: 7200
      poll: 0

    - block:
        - name: Wait for instance creation to complete
          async_status:
            jid: '{{ item.ansible_job_id }}'
          loop: '{{ ec2_instances_async.results }}'
          loop_control:
            index_var: index
            label: '{{ platforms[index].name }}'
          register: ec2_instances
          until: ec2_instances is finished
          retries: 300

        - name: Print list ec2 instances
          ansible.builtin.debug:
            msg: ' list {{ ec2_instances.results[0] }}'

        - name: Collect instance configs
          set_fact:
            instance_config:
              instance: '{{ item.name }}'
              address: '{{ item.assign_public_ip | ternary(instance.public_ip_address, instance.private_ip_address) }}'
              user: '{{ item.ssh_user }}'
              port: '{{ item.ssh_port }}'
              identity_file: '{{ item.private_key_path }}'
              instance_ids:
                - '{{ instance.instance_id }}'
          vars:
            instance: '{{ ec2_instances.results[index].instances[0] }}'
          loop: '{{ platforms }}'
          loop_control:
            index_var: index
            label: '{{ item.name }}'
          register: instance_configs

        - name: Write Molecule instance configs
          copy:
            dest: '{{ molecule_instance_config }}'
            content: >-
              {{ instance_configs.results
                   | map(attribute='ansible_facts.instance_config')
                   | list
                   | to_json
                   | from_json
                   | to_yaml }}

        - name: Start SSH pollers
          wait_for:
            host: '{{ item.address }}'
            port: '{{ item.port }}'
            search_regex: SSH
            delay: 10
            timeout: 320
          loop: "{{ instance_configs.results | map(attribute='ansible_facts.instance_config') | list }}"
          loop_control:
            label: '{{ item.instance }}'
          register: ssh_wait_async
          async: 300
          poll: 0

        - name: Wait for SSH
          async_status:
            jid: '{{ item.ansible_job_id }}'
          loop: '{{ ssh_wait_async.results }}'
          loop_control:
            index_var: index
            label: '{{ platforms[index].name }}'
          register: ssh_wait
          until: ssh_wait_async is finished
          retries: 300
          delay: 1

        - name: Wait for boot process to finish
          pause:
            seconds: "{{ platforms | map(attribute='boot_wait_seconds') | max }}"
      when: ec2_instances_async is changed
